# .github/workflows/ci.yml
name: Firmware CI/CD (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Use pre-built Docker image from registry
  NCS_IMAGE: ghcr.io/${{ github.repository }}/ncs-build:latest
  # Cache keys
  CACHE_VERSION: v1

jobs:
  # Quick checks that can fail fast
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check code formatting
      run: |
        echo "=== Checking basic code format ==="
        # Quick syntax check without compilation
        find src/ -name "*.c" -exec echo "Checking {}" \; -exec head -1 {} \;
        
        # Check for basic issues
        echo "=== Quick lint checks ==="
        grep -r "TODO\|FIXME" src/ || echo "No TODOs found"
        
        echo "âœ… Quick checks passed"

  # Use pre-built Docker image for tests
  test-fast:
    name: Fast Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Cache test build
      uses: actions/cache@v4
      with:
        path: |
          tests/build_test
          ~/.cache/ccache
        key: test-build-${{ env.CACHE_VERSION }}-${{ hashFiles('tests/**/*', 'src/**/*') }}
        restore-keys: |
          test-build-${{ env.CACHE_VERSION }}-
          test-build-
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull pre-built image
      run: |
        # Try to pull pre-built image, fallback to building if needed
        docker pull ${{ env.NCS_IMAGE }} || echo "Pre-built image not available, will build on-demand"
    
    - name: Build image if not available
      if: failure()
      run: |
        echo "Building NCS image on-demand..."
        cat > Dockerfile << 'EOF'
        FROM ubuntu:22.04
        
        ENV DEBIAN_FRONTEND=noninteractive
        ENV ZEPHYR_TOOLCHAIN_VARIANT=zephyr
        ENV ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk
        
        RUN apt-get update && apt-get install -y \
            build-essential ccache cmake curl device-tree-compiler dfu-util \
            file g++ gcc gcc-multilib git gperf libsdl2-dev libffi-dev libssl-dev \
            make ninja-build python3 python3-dev python3-pip python3-setuptools \
            python3-tk python3-wheel python3-venv wget xz-utils unzip \
            && rm -rf /var/lib/apt/lists/* && ln -s /usr/bin/python3 /usr/bin/python
        
        ARG ZEPHYR_SDK_VERSION=0.16.8
        RUN cd /tmp && \
            wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-x86_64.tar.xz && \
            tar -xf zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-x86_64.tar.xz && \
            mv zephyr-sdk-${ZEPHYR_SDK_VERSION} /opt/zephyr-sdk && \
            rm zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-x86_64.tar.xz && \
            cd /opt/zephyr-sdk && ./setup.sh -h -c
        
        RUN pip3 install --no-cache-dir west && \
            git config --global user.email "ci@example.com" && \
            git config --global user.name "CI User"
        
        WORKDIR /workdir
        RUN west init -m https://github.com/nrfconnect/sdk-nrf --mr v3.0.1 ncs && \
            cd ncs && west update && west zephyr-export && \
            pip3 install --no-cache-dir -r zephyr/scripts/requirements.txt && \
            pip3 install --no-cache-dir -r nrf/scripts/requirements.txt && \
            pip3 install --no-cache-dir -r bootloader/mcuboot/scripts/requirements.txt
        
        WORKDIR /workdir/ncs
        ENV ZEPHYR_BASE=/workdir/ncs/zephyr
        RUN mkdir -p /workdir/project
        
        CMD ["/bin/bash"]
        EOF
        
        docker build -t ${{ env.NCS_IMAGE }} .
    
    - name: Run tests with caching
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workdir/project \
          -v ~/.cache/ccache:/root/.cache/ccache \
          -w /workdir/project \
          -e CCACHE_DIR=/root/.cache/ccache \
          ${{ env.NCS_IMAGE }} \
          bash -c "
            echo '=== Setting up ccache ==='
            export CCACHE_DIR=/root/.cache/ccache
            ccache --max-size=1G
            ccache --zero-stats
            
            echo '=== Running Unit Tests ==='
            cd tests
            
            # Use cached build if available
            if [ -d build_test ] && [ -f build_test/build.ninja ]; then
              echo 'Using cached build directory'
              west build -b native_sim --build-dir build_test
            else
              echo 'Clean build required'
              west build -b native_sim --build-dir build_test -p always
            fi
            
            echo '=== Test Results ==='
            ./build_test/tests/zephyr/zephyr.exe
            
            echo '=== Cache statistics ==='
            ccache --show-stats
          "

  # Parallel firmware builds for different targets
  build-firmware:
    name: Build ${{ matrix.board }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test-fast
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[build-all]')
    
    strategy:
      fail-fast: false
      matrix:
        board:
          - nrf52840dk/nrf52840
          # - nrf5340dk/nrf5340/cpuapp
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Cache firmware build
      uses: actions/cache@v4
      with:
        path: |
          build_${{ matrix.board }}
          ~/.cache/ccache
        key: fw-${{ matrix.board }}-${{ env.CACHE_VERSION }}-${{ hashFiles('src/**/*', 'CMakeLists.txt', 'prj.conf') }}
        restore-keys: |
          fw-${{ matrix.board }}-${{ env.CACHE_VERSION }}-
          fw-${{ matrix.board }}-
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build firmware
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workdir/project \
          -v ~/.cache/ccache:/root/.cache/ccache \
          -w /workdir/project \
          -e CCACHE_DIR=/root/.cache/ccache \
          ${{ env.NCS_IMAGE }} \
          bash -c "
            echo '=== Building firmware for ${{ matrix.board }} ==='
            export CCACHE_DIR=/root/.cache/ccache
            ccache --max-size=1G
            
            # Use incremental build if possible
            if [ -d build_${{ matrix.board }} ] && [ -f build_${{ matrix.board }}/build.ninja ]; then
              echo 'Using cached build directory'
              west build -b ${{ matrix.board }} --build-dir build_${{ matrix.board }}
            else
              echo 'Clean build required'
              west build -b ${{ matrix.board }} --build-dir build_${{ matrix.board }} -p always
            fi
            
            echo '=== Build completed ==='
            ls -la build_${{ matrix.board }}/zephyr/zephyr.*
            
            echo '=== Build size analysis ==='
            size build_${{ matrix.board }}/zephyr/zephyr.elf || echo 'Size analysis not available'
          "
    
    - name: Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.board }}
        path: |
          build_${{ matrix.board }}/zephyr/zephyr.hex
          build_${{ matrix.board }}/zephyr/zephyr.elf
          build_${{ matrix.board }}/zephyr/zephyr.bin
        retention-days: 30

  # Coverage only on main branch or when requested
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: test-fast
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[coverage]')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Cache coverage build
      uses: actions/cache@v4
      with:
        path: |
          twister-out
          ~/.cache/ccache
        key: coverage-${{ env.CACHE_VERSION }}-${{ hashFiles('tests/**/*', 'src/**/*') }}
        restore-keys: |
          coverage-${{ env.CACHE_VERSION }}-
          coverage-
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate coverage
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workdir/project \
          -v ~/.cache/ccache:/root/.cache/ccache \
          -w /workdir/project \
          ${{ env.NCS_IMAGE }} \
          bash -c "
            echo '=== Generating Coverage Report ==='
            west twister -T tests/ -p native_sim --coverage
            
            echo '=== Coverage files generated ==='
            find twister-out -name '*.gcov' | head -5
          "
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          twister-out/coverage/
          twister-out/**/*.gcov
        retention-days: 15

  # Conditional release job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test-fast, build-firmware]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download firmware artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: firmware-*
        merge-multiple: true
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Firmware Release v${{ github.run_number }}
        body: |
          ## ðŸš€ Automated Firmware Release
          
          **Commit**: ${{ github.sha }}
          **Tests**: âœ… Passed
          **Build time**: ~${{ github.run_number }} minutes
          
          ### ðŸ“¦ Artifacts
          - Firmware binaries for all supported targets
          - Debug symbols included
        draft: false
        prerelease: false