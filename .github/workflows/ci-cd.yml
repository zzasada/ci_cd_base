name: Zephyr Firmware CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  NCS_VERSION: v3.0.1
  ZEPHYR_VERSION: v3.4.0

jobs:
  # Static Analysis and Linting
  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run clang-format check
      uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: '14'
        check-path: 'src'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        pip install west
        pip install -r scripts/requirements.txt

    - name: Run Python linting
      run: |
        pylint --rcfile=.pylintrc scripts/
        flake8 scripts/

  # Build firmware for multiple targets
  build:
    runs-on: ubuntu-latest
    needs: static-analysis
    strategy:
      fail-fast: false
      matrix:
        board: 
          - nrf52840dk_nrf52840
          - nrf5340dk_nrf5340_cpuapp
          - nrf9160dk_nrf9160_ns
        build_type: [debug, release]
        include:
          - board: nrf52840dk_nrf52840
            arch: arm
            soc_family: nrf52
          - board: nrf5340dk_nrf5340_cpuapp
            arch: arm
            soc_family: nrf53
          - board: nrf9160dk_nrf9160_ns
            arch: arm
            soc_family: nrf91

    container:
      image: nordicplayground/nrfconnect-sdk:v3.0-branch
      options: --cpus 2

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: project
        fetch-depth: 0

    - name: Setup workspace
      run: |
        # Initialize west workspace
        west init -l project
        cd project
        west update --narrow -o=--depth=1
        
        # Set up build environment
        source zephyr/zephyr-env.sh

    - name: Cache build dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          project/build/build-*
        key: ${{ runner.os }}-build-${{ matrix.board }}-${{ hashFiles('**/CMakeLists.txt', '**/prj.conf') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.board }}-
          ${{ runner.os }}-build-

    - name: Build firmware
      run: |
        cd project
        source zephyr/zephyr-env.sh
        
        # Configure build type
        if [ "${{ matrix.build_type }}" = "release" ]; then
          BUILD_CONF="-DCONF_FILE=prj_release.conf"
        else
          BUILD_CONF="-DCONF_FILE=prj.conf"
        fi
        
        # Build the firmware
        west build -b ${{ matrix.board }} app/ $BUILD_CONF
        
        # Generate build info
        echo "Build completed for ${{ matrix.board }} (${{ matrix.build_type }})"
        echo "Firmware size:"
        arm-none-eabi-size build/zephyr/zephyr.elf

    - name: Run unit tests
      if: matrix.build_type == 'debug'
      run: |
        cd project
        source zephyr/zephyr-env.sh
        
        # Build and run unit tests
        west build -b native_posix tests/unit/ -t run

    - name: Generate artifacts
      run: |
        cd project
        mkdir -p artifacts
        
        # Copy firmware files
        cp build/zephyr/zephyr.hex artifacts/
        cp build/zephyr/zephyr.elf artifacts/
        cp build/zephyr/zephyr.bin artifacts/
        
        # Generate firmware info
        echo "Board: ${{ matrix.board }}" > artifacts/build_info.txt
        echo "Build Type: ${{ matrix.build_type }}" >> artifacts/build_info.txt
        echo "Commit: ${{ github.sha }}" >> artifacts/build_info.txt
        echo "Date: $(date)" >> artifacts/build_info.txt
        
        # Calculate checksums
        cd artifacts
        sha256sum *.hex *.bin > checksums.txt

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v3
      with:
        name: firmware-${{ matrix.board }}-${{ matrix.build_type }}
        path: project/artifacts/
        retention-days: 30

  # Hardware-in-the-Loop Testing
  hardware-test:
    runs-on: [self-hosted, nrf-hardware]
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        board: [nrf52840dk_nrf52840]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download firmware
      uses: actions/download-artifact@v3
      with:
        name: firmware-${{ matrix.board }}-debug
        path: firmware/

    - name: Setup test environment
      run: |
        pip install nrfutil
        pip install pytest

    - name: Flash firmware
      run: |
        # Flash the firmware to connected hardware
        nrfutil device program --firmware firmware/zephyr.hex --chiperase

    - name: Run hardware tests
      run: |
        # Run hardware-specific tests
        pytest tests/hardware/ -v --board=${{ matrix.board }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download firmware artifacts
      uses: actions/download-artifact@v3
      with:
        name: firmware-nrf52840dk_nrf52840-release
        path: firmware/

    - name: Run security analysis
      run: |
        # Add security scanning tools here
        # Example: firmware analysis, vulnerability scanning
        echo "Running security analysis..."

  # Release and Deploy
  release:
    runs-on: ubuntu-latest
    needs: [build, hardware-test, security-scan]
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: release-artifacts/

    - name: Create release package
      run: |
        mkdir -p release-package
        
        # Organize release files
        for board in nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp nrf9160dk_nrf9160_ns; do
          mkdir -p release-package/$board
          cp release-artifacts/firmware-$board-release/* release-package/$board/
        done
        
        # Create release notes
        echo "# Firmware Release ${{ github.event.release.tag_name }}" > release-package/RELEASE_NOTES.md
        echo "" >> release-package/RELEASE_NOTES.md
        echo "## Supported Boards" >> release-package/RELEASE_NOTES.md
        echo "- nRF52840 DK" >> release-package/RELEASE_NOTES.md
        echo "- nRF5340 DK" >> release-package/RELEASE_NOTES.md
        echo "- nRF9160 DK" >> release-package/RELEASE_NOTES.md
        
        # Create ZIP package
        cd release-package
        zip -r ../firmware-${{ github.event.release.tag_name }}.zip .

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./firmware-${{ github.event.release.tag_name }}.zip
        asset_name: firmware-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

    - name: Deploy to staging
      if: contains(github.event.release.tag_name, 'rc')
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment logic here

    - name: Deploy to production
      if: "!contains(github.event.release.tag_name, 'rc')"
      run: |
        echo "Deploying to production environment..."
        # Add production deployment logic here

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [build, hardware-test, security-scan]
    if: always()
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "Pipeline completed successfully"
        # Add notification logic (Slack, email, etc.)

    - name: Notify on failure
      if: failure()
      run: |
        echo "Pipeline failed"
        # Add failure notification logic