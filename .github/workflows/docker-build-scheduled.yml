# .github/workflows/docker-build-scheduled.yml
name: Build NCS Docker Image (Scheduled)

on:
  schedule:
    # Build weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
  push:
    paths:
      - 'docker/**'
      - '.github/workflows/docker-build-scheduled.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ncs-build

jobs:
  build-and-push:
    name: Build and Push NCS Image
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value={{date 'YYYY-MM-DD'}}
          type=sha,prefix={{branch}}-
    
    - name: Create optimized Dockerfile
      run: |
        mkdir -p docker
        cat > docker/Dockerfile << 'EOF'
        FROM ubuntu:22.04

        # Set non-interactive mode and environment
        ENV DEBIAN_FRONTEND=noninteractive
        ENV ZEPHYR_TOOLCHAIN_VARIANT=zephyr
        ENV ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk
        ENV PATH="${ZEPHYR_SDK_INSTALL_DIR}/arm-zephyr-eabi/bin:${PATH}"

        # Install system dependencies in one layer
        RUN apt-get update && apt-get install -y \
            build-essential \
            ccache \
            cmake \
            curl \
            device-tree-compiler \
            dfu-util \
            file \
            g++ \
            gcc \
            gcc-multilib \
            git \
            gperf \
            libsdl2-dev \
            libffi-dev \
            libssl-dev \
            make \
            ninja-build \
            python3 \
            python3-dev \
            python3-pip \
            python3-setuptools \
            python3-tk \
            python3-wheel \
            python3-venv \
            wget \
            xz-utils \
            unzip \
            && rm -rf /var/lib/apt/lists/* \
            && ln -s /usr/bin/python3 /usr/bin/python

        # Install Zephyr SDK
        ARG ZEPHYR_SDK_VERSION=0.16.8
        RUN cd /tmp \
            && wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-x86_64.tar.xz \
            && tar -xf zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-x86_64.tar.xz \
            && mv zephyr-sdk-${ZEPHYR_SDK_VERSION} /opt/zephyr-sdk \
            && rm zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-x86_64.tar.xz \
            && cd /opt/zephyr-sdk \
            && ./setup.sh -h -c

        # Install Python dependencies
        RUN pip3 install --no-cache-dir west

        # Git configuration
        RUN git config --global user.email "ci@example.com" \
            && git config --global user.name "CI User" \
            && git config --global init.defaultBranch main

        # Set up NCS workspace (this is the time-consuming part)
        WORKDIR /workdir
        RUN west init -m https://github.com/nrfconnect/sdk-nrf --mr v3.0.1 ncs \
            && cd ncs \
            && west update \
            && west zephyr-export \
            && pip3 install --no-cache-dir -r zephyr/scripts/requirements.txt \
            && pip3 install --no-cache-dir -r nrf/scripts/requirements.txt \
            && pip3 install --no-cache-dir -r bootloader/mcuboot/scripts/requirements.txt

        # Set up ccache
        RUN ccache --max-size=2G \
            && ccache --set-config=cache_dir=/root/.cache/ccache

        # Final setup
        WORKDIR /workdir/ncs
        ENV ZEPHYR_BASE=/workdir/ncs/zephyr
        ENV CCACHE_DIR=/root/.cache/ccache
        RUN mkdir -p /workdir/project

        CMD ["/bin/bash"]
        EOF
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: docker
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test the built image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          bash -c "west --version && echo 'Image test passed'"
